# probe_server.py

import socket
import ssl

def probe_server_main(client_id, central_server_host, central_server_port):
    """Main function for a probe server. Establishes a secure channel with the central server."""
    print(f"[Probe Server {client_id}] Starting...")

    # Create a socket
    context = ssl.create_default_context()

    try:
        with socket.create_connection((central_server_host, central_server_port)) as sock:
            with context.wrap_socket(sock, server_hostname=central_server_host) as ssock:
                print(f"[Probe Server {client_id}] Secure channel established with {central_server_host}:{central_server_port}")
                
                # Placeholder for further communication logic
                while True:
                    message = ssock.recv(1024).decode('utf-8')
                    if message == "EXIT":
                        print(f"[Probe Server {client_id}] Closing connection.")
                        break
                    print(f"[Probe Server {client_id}] Received: {message}")
    except Exception as e:
        print(f"[Probe Server {client_id}] Error: {e}")

if __name__ == "__main__":
    probe_server_main("probe-1", "localhost", 8443)

