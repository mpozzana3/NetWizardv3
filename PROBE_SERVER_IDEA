# probe_server.py

import threading
import queue
from arp_scan import perform_arp_scan
from netbios import perform_netbios_scan
from nmap import perform_nmap_scan

# Dictionary of queues for communication with central server
probe_server_queues = {}

def process_scans(client_id):
    """Process scan tasks and send results to the central server."""
    print(f"[Probe Server {client_id}] Ready to process scans.")
    while True:
        task = probe_server_queues[client_id].get()
        if task == "EXIT":
            break

        scan_type, scan_target = task
        if scan_type == "ARP":
            scan_result = perform_arp_scan(scan_target)
        elif scan_type == "NETBIOS":
            scan_result = perform_netbios_scan(scan_target)
        elif scan_type == "NMAP":
            scan_result = perform_nmap_scan(scan_target)
        else:
            scan_result = "Unknown scan type"

        # Send results to central server (simulated with print for now)
        print(f"[Probe Server {client_id}] Scan result: {scan_result}")

def probe_server_main(client_id):
    """Main function for a probe server."""
    print(f"[Probe Server {client_id}] Starting...")
    probe_server_queues[client_id] = queue.Queue()

    # Start a thread to process scans
    threading.Thread(target=process_scans, args=(client_id,), daemon=True).start()

    # Simulate tasks for testing (replace with real task handling logic)
    probe_server_queues[client_id].put(("ARP", "192.168.1.1"))
    probe_server_queues[client_id].put(("NETBIOS", "192.168.1.2"))
    probe_server_queues[client_id].put(("NMAP", "192.168.1.3"))
    probe_server_queues[client_id].put("EXIT")
