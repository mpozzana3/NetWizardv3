# central_server.py

import socket
import ssl

def central_server_main(host, port):
    """Main function for the central server. Listens for secure connections from probe servers."""
    print(f"[Central Server] Starting on {host}:{port}...")

    # Create an SSL context
    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
            server_socket.bind((host, port))
            server_socket.listen(5)
            print(f"[Central Server] Listening for connections...")

            while True:
                client_socket, addr = server_socket.accept()
                with context.wrap_socket(client_socket, server_side=True) as ssock:
                    print(f"[Central Server] Secure connection established with {addr}")

                    # Placeholder for communication logic
                    ssock.sendall(b"Welcome to the Central Server!\n")
                    while True:
                        message = ssock.recv(1024).decode('utf-8')
                        if not message or message == "EXIT":
                            print(f"[Central Server] Connection with {addr} closed.")
                            break
                        print(f"[Central Server] Received: {message}")
                        ssock.sendall(b"ACK: " + message.encode('utf-8'))
    except Exception as e:
        print(f"[Central Server] Error: {e}")

if __name__ == "__main__":
    central_server_main("localhost", 8443)
